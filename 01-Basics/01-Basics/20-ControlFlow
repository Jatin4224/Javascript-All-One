// //if

// if (condition) {
// }
// if (true) {
//   //to hi yh code execute hoga
// }
// if (false) {
//   // code execute hoga
// }

// if (2 == 2) {
//   console.log("2 is equal to 2");
// }

// const isUserLoggedIn = true;
// if (isUserLoggedIn) {
// }

// //>,<,<=,>=,==,===(it checks type also),!=,!==

// if (2 == "2") {
//   console.log("executed");
// }
// //op-executed

// if (2 === "2") {
//   console.log("executed");
// }
// //op-nothing

// //it is beneficial for strict checking

// const temp = 40
// if(temp < 50) {
//   console.log("lees than 50");}
// console.log("temp is greater than 50")

// //else

// const score = 200
// if(score > 100) {
//   const power = "fly"
//   //var power = "fly"//yh bhar niklega scope k global h isliye do not use
//   console.log(`user power: ${power}`);

// }

// console.log(`user power: ${power}`);

//very immature code:
// const balance =  1000
// if (balance > 500) console.log("test");
// console.log("test2");

//nesting - to check multiple conditions

// const balance = 600;
// if (balance < 500) {
//   console.log("less than ");
// } else if (balance < 750) {
//   console.log("less than 750");
// } else if (balance < 900) {
//   console.log("less than 750");
// } else {
//   console.log("less than 1200");
// }

//&operator
// const userLoggedIn = true;
// const debitCard = true;
// if (userLoggedIn && debitCard) {
//   console.log("Allow to buy course");
// }
//-op-Allow to buy course

// const userLoggedIn = true;
// const debitCard = true;
// if (userLoggedIn && debitCard && 2 == 3) {
//   console.log("Allow to buy course");
// }
//op-nothing if any one condition is false in & operator we dont get the rsult
// The logical AND (&&) (logical conjunction) operator for a set of boolean operands will be true if and only if all the operands are true. Otherwise it will be false.

//2.OR || operator: The logical OR ( || ) (logical disjunction) operator for a set of operands is true if and only if one or more of its operands is true. It is typically used with boolean (logical) values

// const userLoggedIn = true;
// const debitCard = true;
// const loggedInFromGoogle = false;
// const loggedInFromEmail = true;
// if (userLoggedIn && debitCard) {
//   console.log("Allow to buy course");
// }

// //multiple condition check
// if (loggedInFromEmail || loggedInFromGoogle) {
//   console.log("user logged in ");
// }

//switch: The switch statement evaluates an expression, matching the expression's value against a series of case clauses, and executes statements after the first case clause with a matching value, until a break statement is encountered (except default). The default clause of a switch statement will be jumped to if no case matches the expression's value.

//syntax
// key- jis value ko check karna h
// switch(key) {
//   case value;

//     break;

//   default:
//     break;
// }

// const month = 2;
// switch (month) {
//   case 1:
//     console.log("january");
//     break;
//   case 2:
//     console.log("feb");
//     break;
//   case 3:
//     console.log("march");
//     break;

//   default:
//     console.log("default case match");
//     break;
// }

//what is we have string instead of number .

// const month = "january";
// switch (month) {
//   case "january":
//     console.log("january");
//     break;
//   case "feb":
//     console.log("feb");
//     break;
//   case "march":
//     console.log("march");
//     break;

//   default:
//     console.log("default case match");
//     break;
// }

//truthy nd falsy values - imp for interviews
// const userEmail = "ja@gmail.com";

// if (userEmail) {
//   console.log("Got user email");
// } else {
//   console.log("Dont have the email");
// }
//here we dont make any comparion we assume the string is truthy value .

// const userEmail = "";

// if (userEmail) {
//   console.log("Got user email");
// } else {
//   console.log("Dont have the email");
// }
//here we dont make any comparion we assume the empty string false  value.

//rules of truthy and falsy values -

// 1.falsy values

// false, 0 ,-0(imp for interviews), "",BigInt , 0n, null, undefined, NaN.

//except this values all are truthy

// imp -mtruthy values which will suprise u :
//"0", 'false', "false" , " "(space in string), [] , {}, function (){}

// always check array like this

// const userEmail = [];
// if (userEmail.length === 0) {
//   console.log("Array is empty");
// }

//checking empty objects

// const emptyObj = {};
// if (Object.keys(emptyObj).length === 0) {
//   console.log("Object is empty");
// }

//imp points to keep in mind for interviews
// false == 0;
//op- true
// false == "";
//op-true;
// 0 == "";
//op- true

//nullish coalescing operator (??) : null undefined
//The nullish coalescing (??) operator is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.
let val1;
// val1 = 5 ?? 10;
// val1 = null ?? 10;
// val1 = undefined ?? 15;
val1 = null ?? 10 ?? 10;
console.log(val1);

//terniary operator
// condition ? true : false
const iceTeaPrice = 100;
iceTeaPrice <= 80 ? console.log("less than 80") : console.log("more than 80");



//iterations

//for

// for (let i = 0; i <= 10; i++) {
//   const element = i;
//   console.log(element);

//  for (let i = 0; i <= 10; i++) {
// const element = i;
//    if (element == 5) {
//      console.log("5 is the best number");
//    }}
// // console.log(element)

// for (let i = 0; i <= 10; i++) {
//   console.log(`Outer loop val: ${i}`);
//   for (let j = 0; j <= 10; j++) {
//     // console.log(`inner loop value ${j} and inner loop ${i}`);
//     console.log(i + "*" + j + " =" + i * j);
//   }
// }

// let myArray = ["falsh", "batman", "superman"];
// console.log(myArray.length);
// for (let index = 0; index < myArray.length; index++) {
//   const element = myArray[index];
//   console.log(element);
// }

//imp keywords -

//break nd continue

// for (let index = 1; index <= 20; index++) {
//   if (index == 5) {
//     console.log(`Detected 5`);
//     break;
//   }
//   console.log(`value of i is ${index}`);
// }

for (let index = 1; index <= 20; index++) {
  if (index == 5) {
    console.log(`Detected 5`);
    continue; //ek baar maaf kardo
  }
  console.log(`value of i is ${index}`);
}
//5 not printed so continue skips the condition for one time

//while loop
// let index = 0;
//   while (index <= 10) {
//     console.log(`value of index is ${index}`);
//     index = index + 2
//   }

// let myArray = ['flash', "batman", "superman"]

// let arr = 0
// while(arr < myArray.length) {
//   console.log(`value is ${myArray[arr]}`);
//   arr = arr+ 1
// }

//do while-rarely used

let score = 1;
do {
  console.log(`score is ${score}`);
  score++;
} while (score <= 10);

