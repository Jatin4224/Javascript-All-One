Set is a collection of unique values. It can store values of any type.
const fruits = new Set(["apple", "orange", "mango"]);
console.log(fruits);



Sets are very similar to Arrays. One main difference between Sets and Arrays is that a Set can only contain unique values. Arrays can have duplicate elements.
const fruits = new Set(["apple", "orange", "mango", "apple", "grape"]);
console.log(fruits);


Adding Values to Set
The add() method can be used to add a value to the end of a Set.
const truthyValues = new Set(["apple", 1234, true]);

truthyValues.add(56.78);
truthyValues.add("apple");

console.log(truthyValues);

Checking if Value Exists in Set
The has() method can be used to check if a given element is present in a set.

The has() method takes the element to be searched for as the argument. It returns true if the element is found in the set. Otherwise, it returns false.


Checking Number of Elements in Set
The size property returns the number of elements in the Set.

const names = new Set(["Sam", "Oliver", "Adam"]);
console.log(names.size);

Deleting Values From a Set
The delete() method removes an element from a Set.

The delete() method takes the value of the element to be deleted as argument. If it finds the element inside the set and deletes the element, it returns true. It returns false if it was unable to find the element in the set.
const names = new Set(["Sam", "Oliver", "Adam"]);

if (names.delete("Adam")) {
  console.log(names);
} else {
  console.log("Could not find Adam in names");
}


Deleting All Values From a Set
The clear() method removes all the elements from a set.
const names = new Set(["Sam", "Oliver", "Adam"]);
names.clear();
console.log(names);

