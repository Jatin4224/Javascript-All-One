// Topics Covered

// What is async?
// What is await?
// How async await works behind the scenes?
// Example of using async/await
// Error Handling
// Interviews
// Async await vs Promise.then/.catch
// Q: What is async?
// A: Async is a keyword that is used before a function to create a async function.

//what is async function ?lets create it
// 1.this async function always returns a promise
// 2 cases
// case 1. either u written a promise
// async function getData() {
//   return Promise
// }

//case 2 if u dont written a promise from here - suppose u written a value

// async function getData() {
//   return "jasavscript"
// }
//what this function do is ti will take this value and wrao it inside promise and return a promise

//so this function alwaysb return a promise

//now lets call this function

// async function getData() {
//   return "jasavscript"
// }

// const dataPromise = getData();
// console.log(dataPromise);
//op- promise {'jasavscript'}

//now how ill get javascipt out of the promise

// we use .then method

// dataPromise.then((res) => console.log(res));

//now to remember its always return a promise in any case keep in mind for interviews

//now lets see example of returning a promise we have seen returning value already

//lets create promise
// const p = new Promise ((resolve, rejecet)) => {
//   resolve("Promise Resolved values");
// }
// //now we have this promise lets try to return this promise

// async function getData() {
//   return p;
// }

// const dataPromise = getData();
// dataPromise.then((res) => console.log(res));

//now lets see how we can use await along with async and how we can handle actual promises

//async and await combo used to handle promises but before async await how we use promises and why do we need async await lets see how we handle promises before async await

// const p = new Promise((resolve, reject) => {
//   resolve("Promise Resolved values");
// });

// function getData() {
//   p.then((res) => console.log(res));
// }

// getData();

//lets see how we can handle this using async /await

// const p = new Promise((resolve, reject) => {
//   resolve("Promise Resolved values");
// });

// async function handlePromise() {
//   const val = await p;
//   console.log(val);
// }
// handlePromise();

//await is the keyword that is only be used inside a async funtion.
//and u write await keyword in front of promise

//nnow lets see very imp difference between normaly handling and handling using async await
//deep dive into async await

// const p = new Promise((resolve, reject) => {
//   setTimeout(() => {
//     resolve("Promise Resolved values");
//   }, 10000);
// });

// async function handlePromise() {
//   const val = await p;
//   console.log(val);
// }
// handlePromise();

// function getData() {
//   p.then((res) => console.log(res));
//   console.log("javascript");
// }

// getData();
//javascript will be printed first  then the promise will be resolved after 10 seconds

//it will keep the callbck functions and it will not wait promise to be resolved it will jsut mvoe on to the next lione and oprint javascript

// now lets see what happens in async await

// async function handlePromise() {
//   console.log("hello world "); //printed quickly
//   const val = await p; //program waits 10seconds
//   console.log("javascript ");
//   console.log(val);

//   //what happend now?interview questions
//   //after 10 seconds both promises will be printed
//   const val2 = await p;
//   console.log("javascript ");
//   console.log(val2);
// }
// handlePromise();
//so basically js engine is waiting for promise to be resolved and ones the promise is resolved it will wait and it will only got to the next line ones the promise is resolved

//now lets make things more complicated lets make two promises now

// const p1 = new Promise((resolve, reject) => {
//   setTimeout(() => {
//     resolve("Promise Resolved values");
//   }, 10000);
// });

// const p2 = new Promise((resolve, reject) => {
//   setTimeout(() => {
//     resolve("Promise Resolved values");
//   }, 5000);
// });

// //what happend now?interview questions - waht will happen now -
// async function handlePromise() {
//   console.log("hello world "); //printed quickly
//   const val = await p1; //program waits 10seconds
//   console.log("javascript ");
//   console.log(val);

//   const val2 = await p2;
//   console.log("javascript ");
//   console.log(val2);
// }
// handlePromise();

//after 5seconds nothing will be printed but after 10 seconds both printed

//lets see one more example now i will reverse the order

const p1 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("Promise Resolved values");
  }, 5000);
});

const p2 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("Promise Resolved values");
  }, 10000);
});

//what happend now?interview questions - waht will happen now -
async function handlePromise() {
  console.log("hello world "); //printed quickly
  const val = await p1; //program waits 10seconds
  console.log("javascript ");
  console.log(val);

  const val2 = await p2;
  console.log("javascript ");
  console.log(val2);
}
handlePromise();

// When this function is executed, it will go line by line as JS is synchronous single threaded language. Lets observe what is happening under call-stack. Above you can see we have set the break-points.

// call stack flow -> handlePromise() is pushed -> It will log `Hi` to console -> Next it sees we have await where promise is suppose to be resolved -> So will it wait for promise to resolve and block call stack? No -> thus handlePromise() execution get suspended and moved out of call stack -> So when JS sees await keyword it suspend the execution of function till promise is resolved -> So `p` will get resolved after 5 secs so handlePromise() will be pushed to call-stack again after 5 secs. -> But this time it will start executing from where it had left. -> Now it will log 'Hello There!' and 'Promise resolved value!!' -> then it will check whether `p2` is resolved or not -> It will find since `p2` will take 10 secs to resolve so the same above process will repeat -> execution will be suspended until promise is resolved.

//  Thus JS is not waiting, call stack is not getting blocked.

// Moreover in above scenario what if p1 would be taking 10 secs and p2 5 secs -> even though p2 got resolved earlier but JS is synchronous single threaded language so it will first wait for p1 to be resolved and then will immediately execute all.

//Real life example but before that lets
//lets deep dive and understand more fetch()

async function handlePromise() {
  // fetch() => Response Object which as body as Readable stream => Response.json() is also a promise which when resolved => value
  const data = await fetch("https://api.github.com/users/jatin4224"); //waited this line to be rsolved
  const res = await data.json(); //waited this data json to be resolved
  console.log(res);
}
handlePromise();

//Error handling
//here we use try catch to handle errors

async function handlePromise() {
  try {
    const data = await fetch("https://api.github.com/users/jatin4224");
    const res = await data.json();
    console.log(res);
  } catch (err) {
    console.log(err);
  }
}
handlePromise();

// In above whenever any error will occur the execution will move to catch block. One could try above with bad url which will result in error.

// Other way of handling error:
handlePromise().catch((err) => console.log(err)); // this will work as handlePromise will return error promise in case of failure.

// now what is the  api url is invalid

async function handlePromise() {
  try {
    const data = await fetch("https://invalid");
    const res = await data.json();
    console.log(res);
  } catch (err) {
    console.log(err);
  }
}
handlePromise();

handlePromise().catch((err) => console.log(err));

//we got the error and then it did not go to the next line 
// and it quickly jump on to catch block and we got the err and this err says type error failed to catch .


  //one more way to handle errors 

  // they use older way 
  handlePromise().catch(err) => console.log(err));


//interviews tips 
// first type of question is waht is async await ?
//   -tell them waht we hve learned in this blog 
// explain them with examples 
// if required trying to explain promise also 

//Async/await vs Promise.then/catch 
// What one should use? async-await is just a syntactic sugar around promise. Behind the scene async-await is just promise. So both are same, it's just async-await is new way of writing code. async-await solves few of the short-coming of Promise like Promise Chaining. async-await also increases the readability. So sort of it is always advisable to use async-await.
