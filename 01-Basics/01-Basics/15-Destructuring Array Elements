Destructuring Array Elements
If we want to assign specific array elements to other variables, the simplest way known to us right now is to access their values using their index values:

const fruits = ["Apple", "Orange", "Banana"];

const firstFruit = fruits[0];
const secondFruit = fruits[1];
const thirdFruit = fruits[2];

console.log(firstFruit);
console.log(secondFruit);
console.log(thirdFruit);

We can achieve the same result as the example given above with a shorter and more cleaner code using destructuring. Destructuring allows us to copy array elements into variables without modifying the array.

By destructuring an array, we can assign the value of each element of an array to different variables. To do that, we use the following syntax - [...] = array

Example-
const fruits = ["Apple", "Orange", "Banana"];
const [firstFruit, secondFruit, thirdFruit] = fruits;
console.log(firstFruit);
console.log(secondFruit);
console.log(thirdFruit);


Ignoring Elements
While destructuring, we might want to ignore some elements of the array.
example-
const fruits = ["Apple", "Orange", "Mango"];
const [firstFruit, , thirdFruit] = fruits;
console.log(firstFruit);
console.log(thirdFruit);


Destructuring arrays with Rest Operator
If the number of array elements is more than the number of variables provided in destructuring, the other elements are omitted.

example- 
const fruits = ["Apple", "Orange", "Mango", "Banana", "Grape"];

const [firstFruit, secondFruit] = fruits;
console.log(firstFruit);
console.log(secondFruit);

We can use the rest operator, i.e., three dots ... to store all the omitted elements as an array.

example-
const fruits = ["Apple", "Orange", "Mango", "Banana", "Grape"];

const [firstFruit, secondFruit, ...otherFruits] = fruits;
console.log(firstFruit);
console.log(secondFruit);
console.log(otherFruits);


Note-
The rest operator must always come last in the list of variables. Otherwise, it will cause an error.

Using Default Values

example-
const numbers = [24,];
const [firstNumber, secondNumber] = numbers;
console.log(firstNumber + secondNumber);
op-NaN

In the example given above, we have an array numbers with only one element. We attempt to destructure the array and store the first two elements in firstNumber and secondNumber, respectively. firstNumber assigned the value 24. Since there is no second element in the numbers array, secondNumber is assigned undefined. Hence firstNumber + secondNumber produces NaN.
We can prevent such undesired outputs by providing default values for the variables firstNumber and secondNumber:

Example-
const numbers = [24];
const [firstNumber = 0, secondNumber = 0] = numbers;
console.log(firstNumber + secondNumber);

In the example given above, firstNumber gets the value 24. Since there is no second element in the numbers array, secondNumber is assigned the default value.
const [firstNumber = 0, secondNumber = 0] = [];
console.log(firstNumber + secondNumber);




